import com.github.jk1.license.render.*

apply plugin: 'java'
apply plugin: 'com.github.jk1.dependency-license-report'

buildscript {
    repositories {
        if (project.hasProperty('local')) {
            mavenLocal()
        }
        mavenCentral()
        maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://repository.activeeon.com/content/groups/proactive/"
        }
        maven { url "https://repo.jenkins-ci.org/releases/" }
    }

    dependencies {
        classpath "com.diffplug.gradle.spotless:spotless:2.4.0"
        classpath "org.ow2.proactive:coding-rules:1.0.0"
    classpath 'com.github.jk1:gradle-license-report:1.7'
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
    }
}

subprojects {
    apply plugin: 'maven'

    group = 'org.ow2.proactive.r_connector'
    version = "${rConnectorVersion}"

    rootProject.buildscript.repositories.each {
        repositories.add(it)
    }

    configurations {
        addons
    }

}

licenseReport {
    configurations = ['runtime']
    renderers = [new InventoryHtmlReportRenderer()]
}

apply from: "$rootDir/gradle/ext/coding-format.gradle"

def isWindows = System.properties['os.name'].toLowerCase().contains('windows')
def isMac = System.properties['os.name'].toLowerCase().contains('mac')
def isLinux = System.properties['os.name'].toLowerCase().contains('linux')
def rHome = System.getenv('R_HOME')

def rExec
def rScript
def rBinDir = rHome ? rHome + File.separator + 'bin' + File.separator : null
if (isWindows) {
    def ARCH = System.getenv('ProgramFiles(x86)') != null ? 'x64' : 'i386'
    rExec = rBinDir ? rBinDir + ARCH + File.separator + 'R.exe' : 'R.exe'
    rScript = rBinDir ? rBinDir + ARCH + File.separator + 'Rscript.exe' : 'Rscript.exe'
} else {
    rExec = rBinDir ? rBinDir + 'R' : 'R'
    rScript = rBinDir ? rBinDir + 'Rscript' : 'Rscript'
}

task checkRCommands() << {
    def res1 = exec {
        commandLine rExec, '--version'
        ignoreExitValue = true
    }

    if (res1.getExitValue() != 0) {
        throw "R command seems not accessible (using " + rExec + "), please check that R is installed properly"
    }

    def res2 = exec {
        commandLine rScript, '--version'
        ignoreExitValue = true
    }
    if (res2.getExitValue() != 0) {
        throw "RScript command seems not accessible (using " + rScript + "), please check that R is installed properly"
    }
}

task setUserLibPath dependsOn(checkRCommands)
// find user R library path
def userLibPath = new ByteArrayOutputStream()

userLibPath = new ByteArrayOutputStream()
exec {
    commandLine rScript, '--no-save', '-e', 'cat(Sys.getenv(\'R_LIBS_USER\'))'
    standardOutput = userLibPath;
}
userLibPath = userLibPath.toString().trim()

if (isWindows) {
    userLibPath = userLibPath.replace("/", "\\")
} else {
    userLibPath = userLibPath.replace("~", System.getenv("HOME"))
}
println "userLibPath:\n$userLibPath";

// create the user libary directory if it does not exist
new File(userLibPath).mkdirs();

assert new File(userLibPath).exists()


project(':pa-rengine-common') {
    apply plugin: 'java'

    sourceCompatibility = 1.7

    dependencies {
        compile configurations.addons
        compile 'ch.qos.reload4j:reload4j:1.2.25'
        compile 'commons-io:commons-io:2.14.0'
        compile group: 'com.google.guava', name: 'guava', version: '32.0.1-jre'

        compile "org.ow2.proactive:scheduler-api:${schedulingVersion}"
        compile "org.ow2.proactive:common-api:${schedulingVersion}"
        compile "org.ow2.proactive:rm-node:${schedulingVersion}"

        testCompile 'junit:junit:4.12'
    }

    task testJar(type: Jar) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }

}

project(':pa-rserve') {
    apply plugin: 'java'

    sourceCompatibility = 1.7

    dependencies {
        compile configurations.addons
        compile project(':pa-rengine-common')

        addons "org.rosuda.REngine:REngine:2.1.0"
        addons "org.rosuda.REngine:Rserve:1.8.1"

        testCompile project(path: ':pa-rengine-common', configuration: 'tests')
        testCompile 'junit:junit:4.12'
    }

    task installRserve(type: Exec) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'Rserve\', quiet=TRUE)) == 0) {install.packages(\'Rserve\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task addon(type: Zip) {
        from project(':pa-rengine-common').jar
        from configurations.addons
        from jar
    }

    artifacts { archives addon }
    test.dependsOn(installRserve)
    build.dependsOn(addon)
}

project(':pa-jri') {
    apply plugin: 'java'

    sourceCompatibility = 1.7

    dependencies {
        compile configurations.addons
        compile project(':pa-rengine-common')

        addons "org.rosuda:jriengine:0.5.x"
        addons "org.rosuda:jri:0.5.x"
        addons "org.rosuda:rengine:1.7.x"

        testCompile project(path: ':pa-rengine-common', configuration: 'tests')
        testCompile 'junit:junit:4.12'
    }

    task installrJava(type: Exec, dependsOn: checkRCommands) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rJava\', quiet=TRUE)) == 0) {install.packages(\'rJava\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task addon(type: Zip) {
        from project(':pa-rengine-common').jar
        from configurations.addons
        from jar
    }

    artifacts { archives addon }
    test.dependsOn(installrJava)
    build.dependsOn(addon)
}

project(':pa-rconnector') {
    apply plugin: 'base'

    configurations {
        scheduler
        restJars
        rengine
    }

    dependencies {
        scheduler group: "org.ow2.proactive", name: "scheduling", version: schedulingVersion, ext: "zip"

        restJars 'xerces:xercesImpl:2.12.2'
        restJars "org.ow2.proactive_grid_cloud_portal:rest-client:${schedulingVersion}"

        rengine "org.rosuda.REngine:REngine:2.1.0"
    }


    def schedHome = "${rootProject.buildDir}/scheduler"
    def rSrc = "${buildDir}/PARConnector"



    def env = [:]
    env.putAll(System.getenv())
    if (!isMac) {
        if (env.get('JAVA_HOME') == null) {
            throw new IllegalStateException("Please set JAVA_HOME environment variable")
        }
        if (!env.get('JAVA_HOME').endsWith("jre")) {
            env.put('JAVA_HOME', env.get('JAVA_HOME') + File.separator + 'jre')
        }
    }
    if (isLinux) {
        def ldLib
        if (System.getProperty('os.arch').contains('64')) {
            ldLib = new File(env.get('JAVA_HOME'), 'lib/amd64/server')
        } else {
            ldLib = new File(env.get('JAVA_HOME'), 'lib/i386/client')
        }
        env.put('LD_LIBRARY_PATH', ldLib.getAbsolutePath())
    }

    // disable pdf view to avoid a popup
    env.put('R_PDFVIEWER','ls')

    def schedProcess

    task copyRSources(type: Copy) {
        from "${projectDir}/src/main/PARConnector"
        include("**/*")
        exclude("**/.*")
        into rSrc
    }

    if (isLinux) {
        task javareconf(type: Exec, dependsOn: checkRCommands) {
            commandLine rExec, 'CMD', 'javareconf'
        }
    } else {
        // empty task
        task javareconf
    }

    // this task updates the version inside PARConnector package Description file
    task updateVersion(dependsOn: copyRSources) << {
        def patternToExtractVersionFromVariable = java.util.regex.Pattern.compile("^((\\d+\\.)*(\\d+))");
        def matcherToExtractVersionFromVariable = patternToExtractVersionFromVariable.matcher("${rConnectorVersion}");
        def foundValidVersionNumber = matcherToExtractVersionFromVariable.find();

        if (!foundValidVersionNumber) {
            throw new InvalidUserDataException("Invalid version number: ${rConnectorVersion}. It should match ^((\\d+\\.)*(\\d+))");
        }

        def newVersionNumber = matcherToExtractVersionFromVariable.group(0);

        // replace version number in the DESCRIPTION file
        def descFile = file("${rSrc}/DESCRIPTION")
        def pattern = java.util.regex.Pattern.compile("Version: ((\\d+\\.)*(\\d+))")
        def matcher = pattern.matcher(descFile.getText())
        matcher.find()
        def descFileContent = matcher.replaceFirst("Version: " + newVersionNumber)
        descFile.write(descFileContent)
    }

    task copyRDependencies(type: Copy) {
        from configurations.restJars, configurations.rengine
        into "${rSrc}/inst/java"
    }
    task installrJava(type: Exec, dependsOn: javareconf) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rJava\', quiet=TRUE)) == 0) {install.packages(\'rJava\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }
    task installRlang(type: Exec, dependsOn: [checkRCommands]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rlang\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.6.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installGlue(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'glue\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/glue/glue_1.6.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installWhisker(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'whisker\', quiet=TRUE)) == 0) {install.packages(\'whisker\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }
    task installYaml(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'yaml\', quiet=TRUE)) == 0) {install.packages(\'yaml\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }
    task installCurl(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'curl\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/curl/curl_5.1.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installMagrittr(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'magrittr\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/magrittr/magrittr_2.0.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installRappdirs(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rappdirs\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/rappdirs/rappdirs_0.3.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installDesc(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'desc\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/desc/desc_1.4.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installPrettyunits(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'prettyunits\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/prettyunits_1.2.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installProcessx(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'processx\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/processx/processx_3.8.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installRprojroot(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rprojroot\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/rprojroot/rprojroot_2.0.3.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installCrayon(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'crayon\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/crayon/crayon_1.5.1.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installWithr(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'withr\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/withr/withr_2.5.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installCallr(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'callr\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/callr/callr_3.7.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installStringi(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'stringi\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/stringi/stringi_1.7.8.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installDigest(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'digest\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/digest/digest_0.6.30.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installRcpp(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rcpp\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/Rcpp/Rcpp_1.0.13.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installLater(type: Exec, dependsOn: [installRlang,installRcpp]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'later\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/later/later_1.3.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installPurrr(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'purrr\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/purrr/purrr_0.3.5.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installSys(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'sys\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/sys/sys_3.4.1.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installAskPass(type: Exec, dependsOn: [installRlang,installSys]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'askpass\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/askpass/askpass_1.2.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installRstudioApi(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rstudioapi\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/rstudioapi/rstudioapi_0.15.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installZip(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'zip\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/zip_2.3.1.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installClipr(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'clipr\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/clipr_0.8.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installEllipsis(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'ellipsis\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/ellipsis_0.3.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installPraise(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'praise\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/praise_1.0.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installBrio(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'brio\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/brio/brio_1.1.3.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installFs(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'fs\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/fs/fs_1.5.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installXml2(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'xml2\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/xml2/xml2_1.3.3.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installCpp11(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'cpp11\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/cpp11/cpp11_0.4.3.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installCli(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'cli\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/cli/cli_3.6.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installLifecycle(type: Exec, dependsOn: [installRlang,installGlue,installCli]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'lifecycle\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/lifecycle/lifecycle_1.0.3.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }
    task installVctrs(type: Exec, dependsOn: [installLifecycle]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'vctrs\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/vctrs/vctrs_0.5.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installStringR(type: Exec, dependsOn: [checkRCommands,installVctrs,installRlang,installLifecycle,installStringi]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'stringr\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/stringr/stringr_1.5.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installFastmap(type: Exec, dependsOn: [installRlang,installDigest]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'fastmap\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/fastmap/fastmap_1.1.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installPromises(type: Exec, dependsOn: [installRlang,installFastmap,installLater]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'promises\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/promises/promises_1.2.0.1.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installHttpuv(type: Exec, dependsOn: [installPromises,installLater]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'httpuv\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/httpuv/httpuv_1.6.7.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installOpenSsl(type: Exec, dependsOn: [installRlang,installAskPass]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'openssl\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/openssl/openssl_2.0.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installJsonlite(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'jsonlite\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/jsonlite_1.8.8.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installCredentials(type: Exec, dependsOn: [installRlang,installOpenSsl,installCurl,installJsonlite]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'credentials\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/credentials/credentials_2.0.1.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installGert(type: Exec, dependsOn: [installRlang,installOpenSsl,installCredentials,installRstudioApi,installZip]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'gert\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/gert/gert_1.8.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installCachemem(type: Exec, dependsOn: [installRlang,installFastmap]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'cachem\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/cachem/cachem_1.0.6.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installMemoise(type: Exec, dependsOn: [installRlang,installCachemem]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'memoise\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/memoise_2.0.1.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installTibble(type: Exec, dependsOn: [installRlang,installVctrs]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'tibble\', quiet=TRUE)) == 0) {install.packages(\'tibble\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installRematch2(type: Exec, dependsOn: [installRlang,installTibble]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rematch2\', quiet=TRUE)) == 0) {install.packages(\'rematch2\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installDiffobj(type: Exec, dependsOn: [installRlang,installCrayon]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'diffobj\', quiet=TRUE)) == 0) {install.packages(\'diffobj\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installFansi(type: Exec, dependsOn: [installRlang,installCrayon]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'fansi\', quiet=TRUE)) == 0) {install.packages(\'fansi\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installWaldo(type: Exec, dependsOn: [installRlang,installGlue,installRematch2,installTibble,installDiffobj,installFansi]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'waldo\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/waldo/waldo_0.4.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installPkgbuild(type: Exec, dependsOn: [installRlang,installCallr,installCrayon,installDesc,installPrettyunits,installProcessx,installWithr,installRprojroot]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'pkgbuild\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/pkgbuild/pkgbuild_1.4.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installPkgload(type: Exec, dependsOn: [installRlang,installPkgbuild,installDesc,installRprojroot,installRstudioApi,installCrayon,installGlue,installWithr]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'pkgload\', quiet=TRUE)) == 0 || packageVersion(\'pkgload\') != \'1.3.1\') {install.packages(\'https://cran.r-project.org/src/contrib/Archive/pkgload/pkgload_1.3.1.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installBase64enc(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'base64enc\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/base64enc_0.1-3.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installHtmltools(type: Exec, dependsOn: [installRlang,installDigest,installFastmap,installEllipsis,installBase64enc]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'htmltools\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/htmltools/htmltools_0.5.7.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installFontawesome(type: Exec, dependsOn: [installRlang,installHtmltools]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'fontawesome\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/fontawesome_0.5.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installSass(type: Exec, dependsOn: [installRlang,installFs,installHtmltools]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'sass\', quiet=TRUE)) == 0) {install.packages(\'sass\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installBslib(type: Exec, dependsOn: [installRlang,installDigest,installFastmap,installCachemem,installMemoise,installHtmltools,installSass,installLifecycle]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'bslib\', quiet=TRUE)) == 0) {install.packages(\'bslib\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installShiny(type: Exec, dependsOn: [installRlang,installFastmap,installFontawesome,installHtmltools,installBslib,installLifecycle,installWithr]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'shiny\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/shiny/shiny_1.7.3.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installMiniUI(type: Exec, dependsOn: [installRlang,installFastmap,installShiny]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'miniUI\', quiet=TRUE)) == 0) {install.packages(\'miniUI\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installSystemfonts(type: Exec, dependsOn: [installRlang,installCpp11]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'systemfonts\', quiet=TRUE)) == 0 || packageVersion(\'systemfonts\') != \'1.0.4\') {install.packages(\'https://cran.r-project.org/src/contrib/Archive/systemfonts/systemfonts_1.0.4.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installTextshaping(type: Exec, dependsOn: [installRlang,installSystemfonts]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'textshaping\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/textshaping/textshaping_0.3.6.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installRagg(type: Exec, dependsOn: [installTextshaping]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'ragg\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/ragg/ragg_1.2.3.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installEvaluate(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'evaluate\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/evaluate/evaluate_0.23.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installDownlit(type: Exec, dependsOn: [installRlang,installBrio,installDesc,installDigest,installEvaluate,installMemoise,installVctrs,installWithr,installFansi,installYaml]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'downlit\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/downlit/downlit_0.4.3.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installHttr(type: Exec, dependsOn: [installRlang,installOpenSsl]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'httr\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/httr/httr_1.4.4.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installHttr2(type: Exec, dependsOn: [installRlang,installOpenSsl,installWithr,installGlue,installCurl,installMagrittr,installRappdirs]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'httr2\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/httr2/httr2_0.2.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installIni(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'ini\', quiet=TRUE)) == 0) {install.packages(\'ini\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }
    task installGitcreds(type: Exec, dependsOn: [installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'gitcreds\', quiet=TRUE)) == 0) {install.packages(\'gitcreds\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installGh(type: Exec, dependsOn: [installRlang,installHttr2,installGitcreds,installIni,installJsonlite]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'gh\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/gh/gh_1.4.0.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installHighr(type: Exec, dependsOn: [checkRCommands,installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'highr\', quiet=TRUE)) == 0) {install.packages(\'highr\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installXfun(type: Exec, dependsOn: [checkRCommands,installRlang]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'xfun\', quiet=TRUE)) == 0) {install.packages(\'xfun\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installKnitr(type: Exec, dependsOn: [checkRCommands,installRlang,installEvaluate,installHighr,installXfun,installYaml]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'knitr\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/knitr/knitr_1.48.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installRmarkdown(type: Exec, dependsOn: [installRlang,installEvaluate,installHtmltools,installJsonlite,installYaml,installKnitr,installFastmap,installMemoise,installLifecycle]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rmarkdown\', quiet=TRUE)) == 0) {install.packages(\'rmarkdown\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installPkgdown(type: Exec, dependsOn: [installRlang,installCpp11,installSystemfonts,installRagg,installVctrs,installStringR,installBrio,installXml2,installWithr,installDownlit,installPurrr,installHttr,installMagrittr,installJsonlite,installRmarkdown,installTibble,installWhisker,installFs,installXml2]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'pkgdown\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/pkgdown/pkgdown_2.0.7.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installHtmlwidgets(type: Exec, dependsOn: [installRlang,installHtmltools,installJsonlite,installKnitr,installYaml]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'htmlwidgets\', quiet=TRUE)) == 0) {install.packages(\'htmlwidgets\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installProfvis(type: Exec, dependsOn: [installPurrr,installVctrs,installFastmap,installKnitr,installHtmlwidgets]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'profvis\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/profvis/profvis_0.3.8.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installTestThat(type: Exec, dependsOn: [installRlang,installWaldo,installPkgload,installPraise,installBrio,installCallr,installDesc,installDigest,installEllipsis,installEvaluate]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'testthat\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/testthat/testthat_3.1.5.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installCommonmark(type: Exec, dependsOn: [checkRCommands,installRlang,installCurl,installTestThat,installXml2]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'commonmark\', quiet=TRUE)) == 0) {install.packages(\'commonmark\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installBrew(type: Exec, dependsOn: [checkRCommands,installRlang,installTestThat]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'brew\', quiet=TRUE)) == 0) {install.packages(\'brew\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installRoxygen2(type: Exec, dependsOn: [checkRCommands,installPkgload,installPurrr,installStringR,installRlang,installWithr,installXml2,installKnitr,installCommonmark,installBrew]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'roxygen2\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/roxygen2/roxygen2_7.2.3.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installRcmdcheck(type: Exec, dependsOn: [checkRCommands,installPkgbuild,installCurl]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rcmdcheck\', quiet=TRUE)) == 0) {install.packages(\'rcmdcheck\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }


    task installUseThis(type: Exec, dependsOn: [installRlang,installClipr,installCrayon,installCurl,installDesc,installFs,installGert,installGh,installGlue,installJsonlite,installLifecycle,installPurrr,installRappdirs,installRprojroot,installWhisker,installWithr,installRstudioApi,installYaml]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'usethis\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/usethis/usethis_2.1.6.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installRversions(type: Exec, dependsOn: [installRlang,installCurl,installXml2]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'rversions\', quiet=TRUE)) == 0) {install.packages(\'rversions\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installDevTools(type: Exec, dependsOn: [checkRCommands,installRlang,installVctrs,installHttpuv,installFastmap,installPurrr,installHttr,installUseThis,installEllipsis,installMemoise,installMiniUI,installPkgdown,installProfvis,installTestThat,installRoxygen2,installRcmdcheck,installRversions]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'devtools\', quiet=TRUE)) == 0) {install.packages(\'https://cran.r-project.org/src/contrib/Archive/devtools/devtools_2.4.2.tar.gz\', Sys.getenv(\'R_LIBS_USER\'), repos=NULL, type=\'source\')}'
    }

    task installGtools(type: Exec, dependsOn: [checkRCommands]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'gtools\', quiet=TRUE)) == 0) {install.packages(\'gtools\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }

    task installCodeTools(type: Exec, dependsOn: [checkRCommands]) {
        commandLine rExec, '-q', '--no-save', '-e', 'if (length(find.package(\'codetools\', quiet=TRUE)) == 0) {install.packages(\'codetools\', Sys.getenv(\'R_LIBS_USER\'), repos=c(\'http://cran.r-project.org\'))}'
    }



    task installRPackages {
        dependsOn installDevTools, installGtools, installCodeTools, installStringR, installrJava, installRoxygen2
    }


    task generateDocumentation(type: Exec, dependsOn: [checkRCommands, updateVersion, copyRDependencies, installRPackages]) {
        inputs.dir(rSrc)
        outputs.dir(buildDir)
        workingDir rSrc
        commandLine rExec, '-q', '--no-save', '-e', 'library(roxygen2);library(devtools);library(rJava);library(codetools);library(stringr);library(gtools);document()'
        environment env
    }

    task addLibsToNamespace(dependsOn: generateDocumentation) << {
        def descFile = file("${rSrc}/NAMESPACE")
        def nl = System.getProperty("line.separator")
        def text = descFile.getText()
        text = text.concat(nl + "import(rJava, stringr, codetools, gtools)" + nl)
        descFile.write(text)
    }

    task checkRPackage(type: Exec, dependsOn: [addLibsToNamespace]) {
        inputs.dir(rSrc)
        outputs.dir(buildDir)
        workingDir buildDir
        commandLine rExec, 'CMD', 'check', '--no-codoc', '--no-manual', '--no-multiarch', rSrc
        environment env
    }

    task buildRPackage(type: Exec, dependsOn: [checkRPackage]) {
        inputs.dir(rSrc)
        outputs.dir(buildDir)
        workingDir buildDir
        commandLine rExec, 'CMD', 'INSTALL', "--library=$userLibPath", '--build', '--preclean', '--with-keep.source', '--no-multiarch', rSrc
        environment env
    }

    task deletePDF(type: Delete, dependsOn: buildRPackage) {
        delete "$buildDir/PARConnector.pdf"
    }

    task generatePDF(type: Exec, dependsOn: deletePDF) {
        inputs.dir(rSrc)
        outputs.dir(buildDir)
        workingDir buildDir
        commandLine rExec, 'CMD', 'Rd2pdf', 'PARConnector'
        environment env
        // This task requires a properly configured environment, notably:
        // - a LaTex installation (for example https://miktex.org)
        // - Even with the latex binaries, you might find the dreaded:
        // Warning: running command '"C:\PROGRA~1\MiKTeX 2.9\miktex\bin\x64\texify.exe"  --pdf "Rd2.tex" --max-iterations=20 -I "C:/PROGRA~1/R/R-3.4.4/share/texmf/tex/latex" -I "C:/PROGRA~1/R/R-3.4.4/share/texmf/bibtex/bst"' had status 1
        // Error : running 'texi2dvi' on 'Rd2.tex' failed
        //
        // LaTeX errors:
        // !pdfTeX error: pdflatex (file ts1-zi4r): Font ts1-zi4r at 600 not found
        //  ==> Fatal error occurred, no output PDF file produced!
        //
        // In this case, good luck to find a solution..
        ignoreExitValue = true
    }

    task buildRPackageSrc(type: Exec, dependsOn: [checkRPackage]) {
        inputs.dir(rSrc)
        outputs.dir(buildDir)
        workingDir buildDir
        commandLine rExec, 'CMD', 'build', '--preclean', '--no-resave-data', rSrc
        environment env
    }

    task buildR(dependsOn: [buildRPackageSrc, generatePDF])

    build.dependsOn buildR

    // ReInstall PARConnector package to apply changes
    task reinstallRPackage(dependsOn: [checkRCommands, buildRPackage]) << {

        logger.info('Reinstallling ...')
        def packageFile = file(buildDir).listFiles().find {
            it.name.endsWith('tar.gz') ||
                    it.name.endsWith('tgz') ||
                    it.name.endsWith('zip') }
        exec {
            workingDir buildDir
            commandLine rExec, 'CMD', 'INSTALL', "--library=$userLibPath", '--no-multiarch', packageFile.getAbsolutePath()
            environment env
        }
    }

    task clearAddons(type: Delete) {
        delete fileTree(dir: "${schedHome}/addons/client", include: "*.jar")
    }

    task installPARserveJars(type: Copy) {
        from project(':pa-rengine-common').jar
        from project(':pa-rserve').jar
        from project(":pa-rserve").configurations.addons
        into "${schedHome}/addons/client"
    }

    task installPAJRIJars(type: Copy) {
        from project(':pa-rengine-common').jar
        from project(':pa-jri').jar
        from project(":pa-jri").configurations.addons
        into "${schedHome}/addons/client"
    }

    // The following task will unzip the scheduler project into build/scheduler dir
    task distScheduler(type: Copy) {
        from mainArtifactsAsZipTree(configurations.scheduler)
        into "${rootProject.buildDir}/scheduler"
        eachFile { fileCopyDetails ->
            fileCopyDetails.path = fileCopyDetails.path.replaceAll(/(.*\/?)scheduling-${schedulingVersion}\/(.*)/, '$1$2')
        }
        includeEmptyDirs = true
    }

    // Rserve must be executed in non-fork mode
    task changeSchedulerSettingsRServe(dependsOn: distScheduler) << {
        def schediniFile = file("${rootProject.buildDir}/scheduler/config/scheduler/settings.ini")
        def pattern = java.util.regex.Pattern.compile("pa\\.scheduler\\.task\\.fork=.*")
        def matcher = pattern.matcher(schediniFile.getText())
        matcher.find()
        def fileContent = matcher.replaceFirst("pa.scheduler.task.fork=false")
        schediniFile.write(fileContent)

        def rminiFile = file("${rootProject.buildDir}/scheduler/config/rm/settings.ini")
        def pattern2 = java.util.regex.Pattern.compile("pa\\.rm\\.nodelookup\\.timeout=.*")
        def matcher2 = pattern2.matcher(rminiFile.getText())
        matcher2.find()
        def fileContent2 = matcher2.replaceFirst("pa.rm.nodelookup.timeout=60000")
        rminiFile.write(fileContent2)
    }

    // JRI must be executed in fork mode
    task changeSchedulerSettingsJRI(dependsOn: distScheduler) << {
        def schediniFile = file("${rootProject.buildDir}/scheduler/config/scheduler/settings.ini")
        def pattern = java.util.regex.Pattern.compile("pa\\.scheduler\\.task\\.fork=.*")
        def matcher = pattern.matcher(schediniFile.getText())
        matcher.find()
        def fileContent = matcher.replaceFirst("pa.scheduler.task.fork=true")
        schediniFile.write(fileContent)

        def rminiFile = file("${rootProject.buildDir}/scheduler/config/rm/settings.ini")
        def pattern2 = java.util.regex.Pattern.compile("pa\\.rm\\.nodelookup\\.timeout=.*")
        def matcher2 = pattern2.matcher(rminiFile.getText())
        matcher2.find()
        def fileContent2 = matcher2.replaceFirst("pa.rm.nodelookup.timeout=60000")
        rminiFile.write(fileContent2)
    }


    task startScheduler() << {
        schedProcess = ['java', '-classpath', 'dist/lib/*', 'org.ow2.proactive.scheduler.util.SchedulerStarter', '-c', '-ln', '3', '-t', '60000'].execute(null, new File(schedHome))

        try {
            schedProcess.inputStream.eachLine {
                println '>> ' + it
                if (it.contains('rest created')) {
                    throw new Exception()
                }
            }
        } catch (ignored) {
        }

        try {
            int value = schedProcess.exitValue();
            if (value != 0) {
                throw new Exception('Could not start the Scheduler java exited with code ' + value);
            }
        } catch (IllegalThreadStateException e) {/* the process is still running */
        }
    }

    task runFuncTests() << {
        def funcTestsDir = file("${projectDir}/src/main/test/r/functionalTests")
        try {
            funcTestsDir.listFiles().each {
                if (it.getName().startsWith('test')) {
                    println '\n######################\n#   RUNNING functional test ' + it + ' ... \n######################'
                    def toRun = "" + it.getAbsolutePath()
                    exec {
                        workingDir funcTestsDir
                        commandLine rScript, '--slave', '--verbose', '--no-save', '--no-restore-history', toRun, 'QUITONERROR'
                        environment env
                    }
                }
            }
        } finally {
            println '\n######################\n#   SHUTTING down the Scheduler ... \n######################'
            // Use client to remove 'LocalNodes' node source to avoid orphan nodes processes
            def clientProcess = ['java', '-classpath', 'dist/lib/*', 'org.ow2.proactive_grid_cloud_portal.cli.CommonEntryPoint',
                                 '-l', 'admin', '-p', 'admin', '-r', 'LocalNodes'].execute(null, new File(schedHome))
            try {
                clientProcess.inputStream.eachLine {
                    println '>> ' + it
                    if (it.contains('deleted successfully'))
                        throw new Exception()
                }
            } catch (e) {
            }
            schedProcess.destroy();
            // workaround for killing PARServe on windows/linux as removing local nodes creates R zombies
            try {
                if (isWindows) {
                    ['taskkill', '/F', '/im', 'RServe.exe'].execute()
                    ['taskkill', '/F', '/im', 'Rterm.exe'].execute()
                } else {
                    ['killall', '-u', System.getenv("USER"), 'R'].execute()
                }
            } catch (e) {
            }
        }
    }

    task startSchedulerPARserve(dependsOn: [distScheduler, clearAddons, installPARserveJars, changeSchedulerSettingsRServe, reinstallRPackage]) << {
        tasks.startScheduler.execute()
    }

    task startSchedulerPAJRI(dependsOn: [distScheduler, clearAddons, installPAJRIJars, changeSchedulerSettingsJRI, reinstallRPackage]) << {
        tasks.startScheduler.execute()
    }

    task runFuncTestsPARserve(dependsOn: startSchedulerPARserve) << {
        tasks.runFuncTests.execute();
    }

    task runFuncTestsPAJRI(dependsOn: startSchedulerPAJRI) << {
        tasks.runFuncTests.execute();
    }
}

def mainArtifacts(configuration) {
    configuration.resolvedConfiguration.firstLevelModuleDependencies.moduleArtifacts.file
}

def mainArtifactsAsZipTree(configuration) {
    zipTree(mainArtifacts(configuration)[0][0])
}
